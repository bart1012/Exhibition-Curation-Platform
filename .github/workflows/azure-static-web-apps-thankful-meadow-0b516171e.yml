name: Build and Deploy Blazor Web App to Azure Static Web Apps

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - main

jobs:
  build_and_deploy_job:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    runs-on: ubuntu-latest
    name: Build and Deploy Job
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          lfs: false
      
      - name: Set up .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'

      - name: dotnet publish
        # This command publishes the Blazor Server project, which includes the
        # built output of the Blazor WebAssembly client project.
        # It handles all dependencies, so separate restore and build steps are not needed.
        run: dotnet publish App/ECP.UI/ECP.UI.Server/ECP.Ui.Server.csproj -c Release -o ./publish

      - name: Upload artifact for deployment job
        # The path here is crucial. When the server project is published,
        # the static files for the WASM app are placed in the wwwroot folder
        # of the publish output.
        uses: actions/upload-artifact@v4
        with:
          name: blazor-app-artifact
          path: ./publish/wwwroot

  deploy_job:
    runs-on: ubuntu-latest
    needs: build_and_deploy_job
    name: Deploy to Azure Static Web Apps
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: blazor-app-artifact

      - name: Deploy to Azure Static Web Apps
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_THANKFUL_MEADOW_0B516171E }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          # Since you are uploading a pre-built artifact,
          # you do not need to specify app_location or output_location.
          # The deploy action will automatically deploy the contents of the artifact.
          # This assumes the artifact is a zip file of your 'wwwroot' content.
          app_location: ""
          api_location: ""
          output_location: ""
