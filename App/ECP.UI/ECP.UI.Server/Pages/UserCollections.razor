@page "/collections"
@rendermode InteractiveAuto
@using ECP.UI.Server.Components.Collections
@using ECP.UI.Server.Services
@using ECP.UI.Server.Components.Artworks
@inject IUserCollectionsService CollectionsService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inherits UserCollectionsBase


<main class="collections-page">
    <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="py-6 h-100" Style="height: 100%; display: flex; flex-direction: column; ">
     
        <div class="page-header mb-8">
            <MudText Typo="Typo.h3" Align="Align.Center" Class="mb-2" Style="font-weight: 300; color: var(--mud-palette-text-primary);">
                Your Collections
            </MudText>
            <MudText Typo="Typo.body1" Align="Align.Center" Style="color: var(--mud-palette-text-secondary);">
                Organize and explore your curated artwork collections
            </MudText>
        </div>

        @if (_userCollections?.Any() == true)
        {
            <CollectionsGrid UserCollections="@_userCollections" OnDelete="HandleDelete" OnOpenDialog="OpenAddDialog"></CollectionsGrid>
        }
        else
        {
            <NoCollectionsMessage OnOpenDialog="OpenAddDialog"></NoCollectionsMessage>
        }
    </MudContainer>
</main>


@code {
    protected async override Task OnInitializedAsync()
    {
        await FetchCollections();
        StateHasChanged();
    }

    private async Task OpenAddDialog()
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = true,
                MaxWidth = MaxWidth.ExtraSmall,
                FullWidth = true
            };

        var dialog = await DialogService.ShowAsync<NewCollectionDialog>("Add New Collection", options);
        var result = await dialog.Result;
        if (!result.Canceled && result.Data != null)
        {
            var collectionName = (string)result.Data;
            await CreateNewCollection(collectionName);
        }
    }

    private async Task CreateNewCollection(string collectionName)
    {
        Collection newCollection = new Collection(collectionName);
        var addResult = await CollectionsService.CreateCollectionAsync(newCollection);
        if (!addResult.IsSuccess)
        {
            Snackbar.Add("Ops! There was a problem on our end. Please try again.");
        }
        else
        {
            _userCollections?.Add(newCollection);
            StateHasChanged();
        }
    }

    private async Task HandleDelete(string collectionID)
    {

        var deleteResult = await CollectionsService.DeleteCollectionAsync(collectionID);
        if (!deleteResult.IsSuccess)
        {
            Snackbar.Add("Ops! There was a problem on our end. Please try again.");
        }
        else
        {
            int index = _userCollections.FindIndex(c => c.Id == collectionID);
            _userCollections?.RemoveAt(index);
            StateHasChanged();
        }

    }

  
}
