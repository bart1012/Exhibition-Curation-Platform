@page "/artwork/{ArtworkId:int}/{SourceId:int}"
@inject ArtworkService ArtworkService
@rendermode InteractiveAuto
@using ECP.UI.Server.Components.Error
@using ECP.UI.Server.Components.Shared
@using ECP.UI.Client.Components
@using ECP.UI.Server.Components.Artworks

<div class="artwork-details-container">
    @if (isLoading)
    {
        <Loading></Loading>
    }
    else if (_artwork != null)
    {
    <MudGrid Class="d-flex" style="height: 100%; width: 100%; margin: 0; padding: 0; padding-bottom: 2rem; ">
            <!-- artwork image -->
            <MudItem xs="12" sm="7" style="height: 100%;" Class="m-0 pa-0 align-content-start d-flex" >
                @if (!string.IsNullOrEmpty(_artwork.Images?.Web?.Url))
                {
                    <MudImage Src="@_artwork.Images.Web.Url" Alt="@_artwork.Title"
                              Class="rounded-lg shadow-lg"
                              Style="max-width: 100%; width: 100%; height: 100%;"
                              ObjectFit="ObjectFit.Contain"/>
                }
                else
                {
                    <MudImage Src="https://placehold.co/600x400/2c3e50/ecf0f1?text=Image+Not+Found"
                              Alt="Image Not Found"
                              ObjectFit="ObjectFit.Contain"
                              Class="rounded-lg shadow-lg"
                              Style="max-width: 100%; height: 100%;" />
                }
            </MudItem>

            <!-- Artwork information -->
            <MudItem xs="12" sm="5" class="ma-0 pa-0 pl-5 py-5" style="height: 100%">
                <MudCard  Elevation="0" style="height: 100%">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h3">@_artwork.Title</MudText>
                            @if (_artwork.Artists != null && _artwork.Artists.Any())
                            {
                                <MudText Typo="Typo.h5" Class="mt-2">
                                    @string.Join(", ", _artwork.Artists.Select(a => a.Name))
                                </MudText>
                            }
                            <!-- save artwork button-->
                            <!-- <SaveToCollection Artwork="_artwork"></SaveToCollection> -->
                            <SaveToCollection Artwork="_artwork"></SaveToCollection>
                            <!-- -------------------- -->
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudDivider />
                    <MudCardContent>
                        <MudText Typo="Typo.body1" Class="mb-4">
                            <strong>Creation Date:</strong> @_artwork.CreationDate
                        </MudText>
                        <MudText Typo="Typo.body1" Class="mb-4">
                            <strong>Medium:</strong> @_artwork.Medium
                        </MudText>
                        @if (_artwork.Dimensions != null)
                        {
                            <MudText Typo="Typo.body1" Class="mb-4">
                                <strong>Dimensions:</strong>
                                @(_artwork.Dimensions.Width) x @(_artwork.Dimensions.Height) cm
                                @if (_artwork.Dimensions.Depth.HasValue)
                                {
                                    @($" x {_artwork.Dimensions.Depth.Value} cm")
                                }
                            </MudText>
                        }
                        @if (!string.IsNullOrWhiteSpace(_artwork.Description))
                        {
                            <MudText Typo="Typo.body2" Class="mb-4">
                                <div class="mt-4" style="text-align: justify;">
                                    @_artwork.Description
                                </div>
                            </MudText>
                        }
                        @if (_artwork.Subjects != null && _artwork.Subjects.Any())
                        {
                            <MudList T="string">
                                <MudListItem>
                                    <MudText Typo="Typo.h6">Subjects</MudText>
                                    @foreach (var subject in _artwork.Subjects)
                                    {
                                        <MudChip Label="true" Color="Color.Dark" Class="ma-1 rounded-pill">@subject</MudChip>
                                    }
                                </MudListItem>
                            </MudList>
                        }
                        @if (_artwork.Styles != null && _artwork.Styles.Any())
                        {
                            <MudList T="string">
                                <MudListItem>
                                    <MudText Typo="Typo.h6">Styles</MudText>
                                    @foreach (var style in _artwork.Styles)
                                    {
                                        <MudChip Label="true" Color="Color.Dark" Class="ma-1 rounded-pill">@style</MudChip>
                                    }
                                </MudListItem>
                            </MudList>
                        }
                    </MudCardContent>
                    @if (!string.IsNullOrEmpty(_artwork.SourceUrl))
                    {
                        <MudCardActions Class="d-flex justify-end">
                            <MudButton Href="@_artwork.SourceUrl" Target="_blank" Variant="Variant.Filled" Color="Color.Dark" class="rounded-pill">
                                View Source
                            </MudButton>
                        </MudCardActions>
                    }
                </MudCard>
            </MudItem>
        </MudGrid>
    }
    else if (_isServerError)
    {
        <ServerErrorMessage></ServerErrorMessage>
    }
    else
    {
        <NotFoundMessage></NotFoundMessage>
    }
</div>
@code {
    [Parameter]
    public int ArtworkId { get; set; }

    [Parameter]
    public int SourceId { get; set; }

    private Artwork _artwork = null;
    private bool isLoading = true;
    private bool _isServerError = false;

    private bool _expanded = true;
    private bool _saved { get; set; } = false;

    private void OnExpandCollapseClick()
    {
        _expanded = !_expanded;
    }

    protected override async Task OnParametersSetAsync()
    {
        isLoading = true;
        _artwork = null;

        try
        {
            var response = await ArtworkService.GetArtworkByIdAsync(ArtworkId, SourceId);

            if (response.IsSuccess)
            {
                _artwork = response.Value;
            }
            else
            {
                _isServerError = true;
                _artwork = GetHotReloadPlaceholderArtwork();

            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching artwork: {ex.Message}");
            _artwork = null;
        }
        finally
        {
            isLoading = false;
        }


    }

    private Artwork GetHotReloadPlaceholderArtwork()
    {
        return new Artwork
            {
                Title = "Placeholder Artwork",
                Artists = new List<Artist> { new Artist { Name = "Hot Reload" } },
                CreationDate = "2024",
                Medium = "Digital",
                Dimensions = new Dimensions { Width = 80, Height = 120 },
                Description = "This is a placeholder object fetched during hot reload. You can continue working on the UI while the server is not running.",
                Images = new Images
                {
                    Web = new Image
                    {
                        Url = "https://placehold.co/800x1200/5C6BC0/FFFFFF?text=Placeholder+Image"
                    }
                },
                Subjects = new List<string> { "Hot Reload", "Development", "Debugging" },
                Styles = new List<string> { "Informative", "Minimalist" },
                SourceUrl = "https://example.com"
            };
    }
}