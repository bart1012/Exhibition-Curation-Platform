@page "/search"
@rendermode InteractiveAuto

@using ECP.UI.Server.Components.Error
@using ECP.UI.Server.Components.Shared
@using ECP.UI.Server.Components.Search
@using ECP.UI.Server.Models

@inject ArtworkService ArtworkService
@inject NavigationManager NavManager
@inject IDialogService DialogService

 

<main class="search-results-container">
@if (_isLoading)
{
    <Loading Message="Fetching relevant artworks..."></Loading>
}
else if (_artworkList != null)
{

    if (!_artworkList.Any())
    {
        <NoResultsMessage></NoResultsMessage>
    }
    else
    {
       
        <SearchResultsHeader 
            SearchQuery="SearchQuery"
            PageNumber="PageNumber"
            TotalResults="_totalResults"
            OnFilterClick="OpenFilterDialog"
            OnSortDirectionClick="SetSortDirection"
            OnSortFieldClick="SetSortField" />

        <MasonryGrid List="@_artworkList"></MasonryGrid>

        <div class="pagination-container">
            <MudPagination BoundaryCount="1" MiddleCount="1" Style="max-width: 100%;" Selected="@PageNumber" SelectedChanged="HandlePageChanged" Color="Color.Dark" Count="@_totalPages" Size="Size.Large" />
        </div>
    }

}
else if (_isServerError)
{
    <ServerErrorMessage></ServerErrorMessage>
}
</main>

<style>
    .sort-direction-btn svg{
        font-size: 1.25rem !important;
        padding-top: 2.5px !important;
    }

    .sort-direction-btn {
        padding-top: 0;
    }

    .no-hover:hover {
        background-color: transparent !important;
        box-shadow: none !important;
    }
</style>

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "q")]
    public string? SearchQuery { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "p")]
    public int PageNumber { get; set; }

    private const int ResultsPerPage = 25;
    private bool _isDescending = true;
    private bool _isLoading;
    private string _sortText = "Sort";
    private string _sortBy = string.Empty;
    private bool _isServerError;
    private string? _sortQuery;
    private string? _filtersQuery;
    private int _totalPages;
    private int _totalResults;


    private List<ArtworkPreview>? _artworkList = null;



    private async Task FetchDataAsync()
    {
        _isLoading = true;
        _isServerError = false;
        _artworkList = null;
        try
        {

            Result<PaginatedResponse<ArtworkPreview>> response;

            if (string.IsNullOrEmpty(SearchQuery))
            {
                response = await ArtworkService.GetArtworkPreviewsAsync(200, 25, PageNumber);

            }
            else
            {
                response = await ArtworkService.SearchArtworksByQueryAsync(SearchQuery, 25, PageNumber, _sortQuery, _filtersQuery);

            }

            if (response.IsSuccess)
            {
                _artworkList = response.Value.Data.ToList();
                _totalPages = response.Value.Info.TotalPages;
                _totalResults = response.Value.Info.TotalItems;
            }
            else
            {
                _isServerError = true;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching search results in SearchResults.razor: {ex.Message}");
            _isServerError = true;
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void NavigateToUpdatedPage(int newPageNumber, string? newFilters, string? newSort)
    {
        _isLoading = true;
        var uri = NavManager.GetUriWithQueryParameters(new Dictionary<string, object?>
            {
                ["q"] = SearchQuery,
                ["p"] = newPageNumber,
                ["filters"] = newFilters,
                ["sort"] = newSort
            });
        NavManager.NavigateTo(uri);
    }

    protected override void OnParametersSet()
    {
        _isLoading = true;
        _artworkList = null;

        if (PageNumber < 1)
        {
            PageNumber = 1;
        }



        InvokeAsync(async () =>
           {
               await FetchDataAsync();
               StateHasChanged();
           });
    }

    private async Task SetSortDirection(bool newIsDescending)
    {
        _isDescending = newIsDescending;
        HandleSortChanged(new SortOptions() { SortBy = _sortBy, IsDescending = _isDescending });

    }

    private async void SetSortField(int id)
    {
        _sortBy = id == 0 ? "date" : "title";
        HandleSortChanged(new SortOptions() { SortBy = _sortBy, IsDescending = _isDescending });

    }

    private async Task OpenFilterDialog()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions
            {
                CloseOnEscapeKey = true,
                MaxWidth = MaxWidth.Small,
                FullWidth = true
            };

        var dialog = await DialogService.ShowAsync<ArtworkFilterDialog>("Filter Artworks", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null)
        {
            var filters = (ArtworkFilters) result.Data;
            await ApplyFilters(filters);
        }
    }

    private async Task ApplyFilters(ArtworkFilters filters)
    {
        ArtworkFilterDialogHelper filterHelper = new(filters);
        string urlFilterQuery = filterHelper.BuildFilterQuery();
        HandleFiltersChanged(urlFilterQuery);
    }

    private void HandlePageChanged(int i)
    {
        NavigateToUpdatedPage(i, _filtersQuery, _sortQuery);
    }

    private void HandleFiltersChanged(string filters)
    {

        _filtersQuery = filters;
        NavigateToUpdatedPage(1, _filtersQuery, _sortQuery);

    }

    private void HandleSortChanged(SortOptions options)
    {
        if (string.IsNullOrEmpty(options.SortBy))
        {
            return;
        }

        _sortQuery = options.BuildSortQuery();
        NavigateToUpdatedPage(1, _filtersQuery, _sortQuery);

    }
}
