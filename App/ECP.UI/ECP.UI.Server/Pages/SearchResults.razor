@page "/search"
@rendermode InteractiveAuto

@using ECP.UI.Server.Components.Error
@using ECP.UI.Server.Components.Shared
@using ECP.UI.Server.Components.Search
@using ECP.UI.Server.Models

@inject ArtworkService ArtworkService
@inject NavigationManager NavManager
 
<SearchQueryPanel SearchBarColor="SearchBarColor.WHITE" SearchQuery="@SearchQuery" OnSortChanged="@HandleSortChanged" OnFiltersChanged="@HandleFiltersChanged"></SearchQueryPanel>


<div class="search-results-container" style="display: flex; flex-direction: column; height: 100%; justify-content: center;">
@if (_isLoading)
{
    <Loading Message="Fetching relevant artworks..."></Loading>
}
else if (_artworkList != null)
{

    if (!_artworkList.Any())
    {
        <NoResultsMessage></NoResultsMessage>
    }
    else
    {
        <div class="results-header mb-2">
                <MudText Typo="Typo.h5" Class="results-title mt-5">
                    @if (!string.IsNullOrWhiteSpace(SearchQuery))
                    {
                        <text>Results for "@SearchQuery"</text>
                    }
                    else
                    {
                        <text>All Artworks</text>
                    }
                </MudText>
                <MudDivider Class="my-3" />
            <MudText Typo="Typo.body2" Class="text-secondary mb-5">
                Showing @(((PageNumber - 1) * 25) + 1) - @Math.Min(PageNumber * 25, _totalResults)
                of @_totalResults results
            </MudText>
        </div>
        <MasonryGrid List="@_artworkList"></MasonryGrid>

        <div class="pagination-container">
            <MudPagination Selected="@PageNumber" SelectedChanged="PageChanged" Color="Color.Dark" class="flex-none px-0" Count="@_totalPages" Size="Size.Large" />
        </div>
    }

}
else if (_isServerError)
{
    <ServerErrorMessage></ServerErrorMessage>
}
</div>

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "q")]
    public string SearchQuery { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "p")]
    public int PageNumber { get; set; }

    private bool _isServerError = false;
    private string? _sortQuery = null;
    private string? _filtersQuery = null;
    private int _totalPages { get; set; }
    private int _totalResults;

    private List<ArtworkPreview>? _artworkList = null;

    private bool _isLoading = true;

    private async Task FetchDataAsync()
    {
        _isLoading = true;
        _isServerError = false;
        _artworkList = null;
        try
        {
            var response = await ArtworkService.SearchArtworksByQueryAsync(SearchQuery, 25, PageNumber, _sortQuery, _filtersQuery);

            if (response.IsSuccess)
            {
                _artworkList = response.Value.Data.ToList();
                _totalPages = response.Value.Info.TotalPages;
                _totalResults = response.Value.Info.TotalItems;
            }
            else
            {
                _isServerError = true;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching search results from SearchResults.razor: {ex.Message}");
            _artworkList = null;
            _isServerError = true;
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        _isLoading = true;
        _artworkList = null;

        InvokeAsync(async () =>
           {
               await FetchDataAsync();
               StateHasChanged();
           });
    }


    private void PageChanged(int i)
    {
        _isLoading = true;
        StateHasChanged();
        NavManager.NavigateTo($"/search?q={SearchQuery}&p={i}{_filtersQuery}{_sortQuery}");
    }

    private async Task HandleFiltersChanged(string filters)
    {
        _isLoading = true;
        StateHasChanged();
        _filtersQuery = filters;
        PageNumber = 1;
        NavManager.NavigateTo($"/search?q={SearchQuery}&p={PageNumber}{_filtersQuery}{_sortQuery}");
    }

    private async Task HandleSortChanged(SortOptions options)
    {
        if (string.IsNullOrEmpty(options.SortBy))
        {
            return;
        }

        _isLoading = true;
        StateHasChanged();
        string sortQuery = options.BuildSortQuery();
        _sortQuery = sortQuery;
        PageNumber = 1;
        NavManager.NavigateTo($"/search?q={SearchQuery}&p={PageNumber}{_filtersQuery}{_sortQuery}");
    }
}
