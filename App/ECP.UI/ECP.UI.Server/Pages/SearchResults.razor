@page "/search"
@rendermode InteractiveAuto

@using ECP.UI.Server.Components.Error
@using ECP.UI.Server.Components.Shared
@using ECP.UI.Server.Components.Search
@using ECP.UI.Server.Models

@inject ArtworkService ArtworkService
@inject NavigationManager NavManager
@inject IDialogService DialogService

 

<div class="search-results-container" style="display: flex; flex-direction: column; height: 100%; justify-content: center;">


 

@if (_isLoading)
{
    <Loading Message="Fetching relevant artworks..."></Loading>
}
else if (_artworkList != null)
{

    if (!_artworkList.Any())
    {
        <NoResultsMessage></NoResultsMessage>
    }
    else
    {
       
        <div class="results-header mb-2">
                <MudText Typo="Typo.h5" Class="results-title mt-5">
                    @if (!string.IsNullOrWhiteSpace(SearchQuery))
                    {
                        <text>Results for "@SearchQuery"</text>
                    }
                    else
                    {
                        <text>All Artworks</text>
                    }
                </MudText>
                <MudDivider Class="my-3" />
            <div style="display: flex; flex-direction: row; justify-content: space-between;">
                <MudText Typo="Typo.body2" Class="text-secondary mb-5">
                    Showing @(((PageNumber - 1) * 25) + 1) - @Math.Min(PageNumber * 25, _totalResults)
                    of @_totalResults results
                </MudText>
                    <div class="search-controls">
                        <MudButton OnClick="OpenFilterDialog" Variant="Variant.Outlined" Color="Color.Dark" StartIcon="@Icons.Material.Filled.FilterList" Class="rounded-pill search-button">
                            Filter
                        </MudButton>
                        <MudButtonGroup Color="Color.Default" Variant="Variant.Outlined">

                            <MudMenu FullWidth="true"
                                     AnchorOrigin="Origin.BottomLeft">
                                <ActivatorContent>
                                    <MudButton Class="rounded-l-xl px-10" Style="min-width: 12rem;">
                                        @_sortText
                                    </MudButton>
                                </ActivatorContent>
                                <ChildContent>
                                    <MudMenuItem Style="min-width: 12rem;" OnClick="@(() => SetSortField(0))">Creation Date</MudMenuItem>
                                    <MudMenuItem Style="min-width: 12rem;" OnClick="@(() => SetSortField(1))">Alphabetically</MudMenuItem>
                                </ChildContent>
                            </MudMenu>

                            <MudToggleIconButton Toggled="_isDescending"
                                                 ToggledChanged="SetSortDirection"
                                                 Icon="@Icons.Material.Filled.ArrowUpward"
                                                 Color="@Color.Dark"
                                                 Size="Size.Small"
                                                 ToggledIcon="@Icons.Material.Filled.ArrowDownward"
                                                 ToggledColor="@Color.Dark"
                                                 Class="rounded-r-xl" />
                        </MudButtonGroup>
                    </div>
            </div>
        </div>
        <MasonryGrid List="@_artworkList"></MasonryGrid>

        <div class="pagination-container">
            <MudPagination Selected="@PageNumber" SelectedChanged="HandlePageChanged" Color="Color.Dark" class="flex-none px-0" Count="@_totalPages" Size="Size.Large" />
        </div>
    }

}
else if (_isServerError)
{
    <ServerErrorMessage></ServerErrorMessage>
}
</div>

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "q")]
    public string? SearchQuery { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "p")]
    public int PageNumber { get; set; }

    private const int ResultsPerPage = 25;
    private bool _isDescending = true;
    private bool _isLoading;
    private string _sortText = "Sort";
    private string _sortBy = string.Empty;
    private bool _isServerError;
    private string? _sortQuery;
    private string? _filtersQuery;
    private int _totalPages;
    private int _totalResults;


    private List<ArtworkPreview>? _artworkList = null;



    private async Task FetchDataAsync()
    {
        _isLoading = true;
        _isServerError = false;
        _artworkList = null;
        try
        {

            Result<PaginatedResponse<ArtworkPreview>> response;

            if (string.IsNullOrEmpty(SearchQuery))
            {
                response = await ArtworkService.GetArtworkPreviewsAsync(200, 25, PageNumber);

            }
            else
            {
                Console.WriteLine($"Fetching data with filter {_filtersQuery}");
                response = await ArtworkService.SearchArtworksByQueryAsync(SearchQuery, 25, PageNumber, _sortQuery, _filtersQuery);

            }

            if (response.IsSuccess)
            {
                _artworkList = response.Value.Data.ToList();
                _totalPages = response.Value.Info.TotalPages;
                _totalResults = response.Value.Info.TotalItems;
            }
            else
            {
                _isServerError = true;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching search results in SearchResults.razor: {ex.Message}");
            _isServerError = true;
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void NavigateToUpdatedPage(int newPageNumber, string? newFilters, string? newSort)
    {
        _isLoading = true;
        var uri = NavManager.GetUriWithQueryParameters(new Dictionary<string, object?>
            {
                ["q"] = SearchQuery,
                ["p"] = newPageNumber,
                ["filters"] = newFilters,
                ["sort"] = newSort
            });
        NavManager.NavigateTo(uri);
    }

    protected override void OnParametersSet()
    {
        _isLoading = true;
        _artworkList = null;

        if (PageNumber < 1)
        {
            PageNumber = 1;
        }



        InvokeAsync(async () =>
           {
               await FetchDataAsync();
               StateHasChanged();
           });
    }

    private async Task SetSortDirection(bool newIsDescending)
    {
        _isDescending = newIsDescending;
        HandleSortChanged(new SortOptions() { SortBy = _sortBy, IsDescending = _isDescending });

    }

    private async void SetSortField(int id)
    {
        SetSortButtonText(id);
        _sortBy = id == 0 ? "date" : "title";
        HandleSortChanged(new SortOptions() { SortBy = _sortBy, IsDescending = _isDescending });

    }

    private void SetSortButtonText(int id)
    {


        switch (id)
        {
            case 0:
                _sortText = "Creation Date";
                break;
            case 1:
                _sortText = "Alphabetically";
                break;
        }

    }

    private async Task OpenFilterDialog()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions
            {
                CloseOnEscapeKey = true,
                MaxWidth = MaxWidth.Small,
                FullWidth = true
            };

        var dialog = await DialogService.ShowAsync<ArtworkFilterDialog>("Filter Artworks", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null)
        {
            var filters = (ArtworkFilters) result.Data;
            await ApplyFilters(filters);
        }
    }

    private async Task ApplyFilters(ArtworkFilters filters)
    {
        ArtworkFilterDialogHelper filterHelper = new(filters);
        string urlFilterQuery = filterHelper.BuildFilterQuery();
        HandleFiltersChanged(urlFilterQuery);
    }

    private void HandlePageChanged(int i)
    {
        NavigateToUpdatedPage(i, _filtersQuery, _sortQuery);
    }

    private void HandleFiltersChanged(string filters)
    {

        _filtersQuery = filters;
        NavigateToUpdatedPage(1, _filtersQuery, _sortQuery);

    }

    private void HandleSortChanged(SortOptions options)
    {
        if (string.IsNullOrEmpty(options.SortBy))
        {
            return;
        }

        _sortQuery = options.BuildSortQuery();
        NavigateToUpdatedPage(1, _filtersQuery, _sortQuery);

    }
}
