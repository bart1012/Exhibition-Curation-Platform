@page "/search"
@rendermode InteractiveAuto

@using ECP.UI.Server.Components.Error
@using ECP.UI.Server.Components.Shared
@using ECP.UI.Server.Components.Search
@using ECP.UI.Server.Models

@inject ArtworkService ArtworkService
@inject NavigationManager NavManager
@inject IDialogService DialogService

 

<main class="search-results-container">
@if (_isLoading)
{
    <Loading Message="Fetching relevant artworks..."></Loading>
}
else if (_artworkList != null)
{
     <SearchResultsHeader SearchQuery="@SearchQuery"
        PageNumber="PageNumber"
        TotalResults="_totalResults"
        OnFilterClick="OpenFilterDialog"
        OnSortDirectionChanged="HandleSortDirectionChanged"
        OnSortFieldChanged="HandleSortFieldChanged"
                             SortText="@_sortText"
        IsDescending="_currentSort.IsDescending" />

    if (!_artworkList.Any())
    {
        <NoResultsMessage></NoResultsMessage>
    }
    else
    {

        <MasonryGrid List="@_artworkList"></MasonryGrid>

        <div class="pagination-container">
            <MudPagination BoundaryCount="1" MiddleCount="1" Style="max-width: 100%;" Selected="@PageNumber" SelectedChanged="HandlePageChanged" Color="Color.Dark" Count="@_totalPages" Size="Size.Large" />
        </div>
    }

}
else if (_isServerError)
{
    <ServerErrorMessage></ServerErrorMessage>
}
</main>

<style>
    .sort-direction-btn svg{
        font-size: 1.25rem !important;
        padding-top: 2.5px !important;
    }

    .sort-direction-btn {
        padding-top: 0;
    }

    .no-hover:hover {
        background-color: transparent !important;
        box-shadow: none !important;
    }
</style>

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "q")]
    public string? SearchQuery { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "p")]
    public int PageNumber { get; set; }

    private const int ResultsPerPage = 25;
    private bool _isLoading;
    private bool _isServerError;
    private string? _sortQuery;
    private string? _filtersQuery;
    private ArtworkFilters _currentFilters;
    private SortOptions _currentSort;
    private string? _sortText;
    private int _totalPages;
    private string? _previousSearchQuery;
    private int _totalResults;


    private List<ArtworkPreview>? _artworkList = null;



    private async Task FetchDataAsync()
    {
        _isLoading = true;
        _isServerError = false;
        _artworkList = null;
        try
        {

            Result<PaginatedResponse<ArtworkPreview>> response;

            if (string.IsNullOrEmpty(SearchQuery))
            {
                response = await ArtworkService.GetArtworkPreviewsAsync(200, 25, PageNumber);

            }
            else
            {
                response = await ArtworkService.SearchArtworksByQueryAsync(SearchQuery, 25, PageNumber, _sortQuery, _filtersQuery);

            }

            if (response.IsSuccess)
            {
                if(!response.Value.Data.Any())
                {
                    _artworkList = new();
                    _totalPages = 0;
                    _totalResults = 0;
                }
                else
                {
                    _artworkList = response.Value.Data.ToList();
                    _totalPages = response.Value.Info.TotalPages;
                    _totalResults = response.Value.Info.TotalItems;
                }

            }
            else
            {
                _isServerError = true;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching search results in SearchResults.razor: {ex.Message}");
            _isServerError = true;
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void NavigateToUpdatedPage(int newPageNumber, string? newFilters, string? newSort)
    {
        _isLoading = true;
        var uri = NavManager.GetUriWithQueryParameters(new Dictionary<string, object?>
            {
                ["q"] = SearchQuery,
                ["p"] = newPageNumber,
                ["filters"] = newFilters,
                ["sort"] = newSort
            });
        NavManager.NavigateTo(uri);
    }

    protected override void OnInitialized()
    {
        _currentSort = new() { SortBy = SortField.Undefined, IsDescending = true };
        _sortText = "Sort";
    }

    protected override void OnParametersSet()
    {

        Console.WriteLine($"OnParametersSet called:");
        Console.WriteLine($"  Current SearchQuery: '{SearchQuery}'");
        Console.WriteLine($"  Previous SearchQuery: '{_previousSearchQuery}'");
        Console.WriteLine($"  Current _filtersQuery: '{_filtersQuery}'");


        if (SearchQuery != _previousSearchQuery)
        {
            _currentSort = new() { SortBy = SortField.Undefined, IsDescending = true };
            _sortText = "Sort";
            _currentFilters = null;
            _sortQuery = null;
            _filtersQuery = null;
        }

        _previousSearchQuery = SearchQuery;

        if (PageNumber < 1)
        {
            PageNumber = 1;
        }

        _isLoading = true;
        _artworkList = null;


        InvokeAsync(async () =>
           {
               await FetchDataAsync();
               StateHasChanged();
           });
    }

    private async Task OpenFilterDialog()
    {
        var parameters = new DialogParameters();
        if(_currentFilters != null) parameters.Add("Filters", _currentFilters);
        var options = new DialogOptions
            {
                CloseOnEscapeKey = true,
                MaxWidth = MaxWidth.Small,
                FullWidth = true
            };

        var dialog = await DialogService.ShowAsync<ArtworkFilterDialog>("Filter Artworks", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null)
        {
            var filters = (ArtworkFilters) result.Data;
            _currentFilters = filters;
            ApplyFilters(filters);
        }
    }

    private void ApplyFilters(ArtworkFilters filters)
    {
        ArtworkFilterDialogHelper filterHelper = new(filters);
        string urlFilterQuery = filterHelper.BuildFilterQuery();
        HandleFiltersChanged(urlFilterQuery);
    }

    private void HandlePageChanged(int i)
    {
        NavigateToUpdatedPage(i, _filtersQuery, _sortQuery);
    }

    private void HandleFiltersChanged(string filters)
    {

        _filtersQuery = filters;
        NavigateToUpdatedPage(1, _filtersQuery, _sortQuery);

    }

    private void HandleSortDirectionChanged(bool newDirection)
    {
        if (_currentSort.SortBy == SortField.Undefined)
        {
            return;
        }
        _currentSort.IsDescending = newDirection;
        _sortQuery = _currentSort.BuildSortQuery();
        NavigateToUpdatedPage(1, _filtersQuery, _sortQuery);

    }

    private void HandleSortFieldChanged(int fieldId)
    {
        if (!Enum.IsDefined(typeof(SortField), fieldId) 
        || (SortField) fieldId == SortField.Undefined
        || ((SortField) fieldId == _currentSort.SortBy))
        {
            return;
        }
        _currentSort.SortBy = (SortField)fieldId;
        _sortText = _currentSort.SortBy.ToString();
        _sortQuery = _currentSort.BuildSortQuery();
        NavigateToUpdatedPage(1, _filtersQuery, _sortQuery);
    }
}
