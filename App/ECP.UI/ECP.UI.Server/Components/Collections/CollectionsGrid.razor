@inject IDialogService DialogService
@inject IUserCollectionsService CollectionsService
@inject ISnackbar Snackbar


<MudGrid Spacing="3" Class="collections-grid ma-0">
    @foreach (Collection item in UserCollections)
    {
        <MudItem xs="12" sm="4" md="3" lg="2" style="padding: 8px;  height: 15rem;">
            <a href="/collection/@item.Id">
                <MudPaper Class="d-flex flex-column" Elevation="2" Style="height: 100%; width: 100%; justify-content: space-between; position: relative;">
                    <div class="collection-preview">
                        @if (item.Artworks?.Any() == true)
                        {
                            <div class="preview-image-container">
                                <MudImage ObjectFit="ObjectFit.Cover" 
                                Src="@item.Artworks.LastOrDefault()?.Thumbnail?.Url" 
                                Style="height: 100%; width: 100%;"
                                 Alt="@($"Preview image for {item.Name}")" />
                            </div>
                        }
                        else
                        {
                            <div class="empty-collection-placeholder" />                     
                        }
                    </div>

                    <div class="collection-data">
                        <div class="collection-info">
                            <MudText Typo="Typo.subtitle1" Class="collection-name">
                                @item.Name
                            </MudText>
                            <MudText Typo="Typo.caption" Class="collection-count">
                                @item.Artworks.Count @(item.Artworks.Count == 1 ? "artwork" : "artworks")
                            </MudText>
                        </div>
                    </div>

                </MudPaper>
            </a>
            <div class="collection-actions">
                <MudIconButton OnClick="() => OnDelete.InvokeAsync(item.Id)" Class="ma-0 pa-0" 
                    Icon="@Icons.Material.Outlined.Delete" 
                    Color="Color.Error"
                    aria-label="@($"Delete collection {item.Name}")" />
            </div>
        </MudItem>
    }
    <MudItem xs="12" sm="4" md="3" lg="2" style="padding: 8px;  height: 15rem;">
        <div class="add-btn-container">
            <MudIconButton Class="add-btn px-6 py-2" Icon="@Icons.Material.Filled.Add"  
                           Variant="Variant.Filled"
                           OnClick="() => OnOpenDialog.InvokeAsync()"
                           Size="Size.Large"
                           Style="width: 100%; height: 100%; font-size: 3rem; color: var(--mud-palette-text-disabled);"
                           aria-label="Create new collection" />
        </div>
    </MudItem>
</MudGrid>

<style>
 

    .mud-grid-spacing-xs-3 {
        margin: 0 !important;
        width: 100% !important;
    }

    .collection-actions{
        position: relative;
        float: right;
        top: -100%;
        right: 0;
        width: 1.5rem;
        margin: 1rem;
    }

    .collection-actions svg {
        fill: white !important;
        transition: fill 0.3s ease-out;
    }

    .collection-actions:hover svg {
        fill: #ff441f !important;
    }

    .add-btn svg {
        fill: white !important;
    }

    .collection-preview, .new-collection {
        flex: 1;
        position: relative;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        width: 100%;
        height: 100%;
    }

    .preview-image-container {
    width: 100%;
    height: 100%;
    position: relative;
    overflow: hidden;
}


.preview-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
}

.collection-link:hover .preview-image {
    transform: scale(1.05);
}

.collection-name, .collection-count{
    color: white !important;
}

.preview-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0,0,0,0.4);
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    transition: opacity 0.3s ease;
}

.empty-collection-placeholder, .add-btn-container {
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
        background: linear-gradient(135deg, #858585 0%, #595959 100%);
    }



.collection-data {
    padding: 16px;
    position: absolute;
    background-color: rgba(1,1,1,0.4);
    height: 100%;
    width: 100%;
    top: 0;
    left: 0;
    color: white;
    display: flex;
    flex-direction: row;
    justify-content: space-between;
}

.collection-name {
    font-weight: 600;
    color: var(--mud-palette-text-primary);
    margin-bottom: 4px;
    line-height: 1.3;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
}

.collection-count {
    color: var(--mud-palette-text-secondary);
    font-size: 0.875rem;
    font-weight: 400;
}


@@media (max-width: 600px) {
    .collections-page {
        background: white;
    }

    .collection-card {
        height: 180px;
    }


    .collection-data {
        padding: 12px;
    }

    .page-header {
        margin-bottom: 1.5rem;
    }
}

@@media (max-width: 960px) {
    .collection-card {
        height: 240px;
    }


}
</style>

@code {
    [Parameter]
    public List<Collection>? UserCollections { get; set; }

    [Parameter]
    public EventCallback<string> OnDelete { get; set; }

    [Parameter]
    public EventCallback OnOpenDialog { get; set; }
   
}
