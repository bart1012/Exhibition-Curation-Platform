@using MudBlazor;
@inject NavigationManager Navigation
@implements IDisposable

    <MudAppBar Elevation="0" Color="Color.Transparent">
    @if (!_drawerOpen)
    {
    <MudIconButton Icon="@Icons.Material.Filled.Menu"
    Color="Color.Inherit"
    Size="Size.Large"
    Edge="Edge.Start"
    OnClick="@DrawerToggle" />
    }
    <MudSpacer />
    <MudIconButton Icon="@Icons.Material.Filled.MoreVert"
    Color="Color.Inherit"
    Edge="Edge.End" />
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="2" Class="mud-drawer-fixed" Style="z-index:5000">
    <MudDrawerHeader>
        <MudIconButton Icon="@Icons.Material.Filled.ArrowBack"
                       Color="Color.Default"
                       Size="Size.Small"
                       OnClick="@DrawerToggle" 
                       Style="color: black;"/>
    </MudDrawerHeader>
    <MudNavMenu Color="Color.Dark">
        <MudNavLink Color="Color.Dark" Href="/" Match="NavLinkMatch.All">Explore</MudNavLink>
        <MudNavLink Href="/collections">My Collections</MudNavLink>
        <MudNavLink Href="/search">Search</MudNavLink>
    </MudNavMenu>
</MudDrawer>

<style>
    .mud-icon-size-medium{
        fill: black !important;
    }
</style>
 


@code{
    private bool _drawerOpen = false;

    protected override void OnInitialized()
    {
        Navigation.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        _drawerOpen = false;
        StateHasChanged();
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen; // Fixed this too!
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= OnLocationChanged;
    }
}