@using MudBlazor
@using ECP.UI.Server.Services
@inject IUserCollectionsService CollectionsService

<div class="d-flex justify-start position-relative">
    @if (!_isExpanded)
    {
        <MudButton Variant="Variant.Filled" Color="Color.Dark" StartIcon="@Icons.Material.Filled.BookmarkBorder"
                   Class="rounded-lg mud-elevation-4" OnClick="ToggleExpansion">
            @(_isSaved ? "Saved" : "Save")
        </MudButton>
    }
    else
    {
        <div class="position-absolute" style="top: 0; left: 0; z-index: 1000; min-width: 350px; background: white; border-radius: 8px; box-shadow: 0 8px 32px rgba(0,0,0,0.12);">
            <MudStack Spacing="2" Class="pa-4">
                <MudText Typo="Typo.subtitle1" Class="text-muted mb-2">Save to a collection</MudText>

                <MudSelect T="string"
                           @bind-Value="_selectedCollection"
                           Label="Select Collection"
                           Variant="Variant.Outlined"
                           AnchorOrigin="Origin.BottomLeft"
                           MaxHeight="300"
                           Dense="true">
                    @foreach (var collection in _userCollections)
                    {
                        <MudSelectItem Value="@collection.Id">@collection.Name</MudSelectItem>
                    }
                    @if (!_isAddingNewCollection)
                    {
                        <MudSelectItem Value="@CreateNew" OnClick="StartNewCollectionFlow">
                            <MudButton OnClick="StartNewCollectionFlow" Variant="Variant.Text" Color="Color.Primary" Class="w-100 justify-start">
                                <b>+ Create New Collection</b>
                            </MudButton>
                        </MudSelectItem>
                    }
                </MudSelect>

                @if (_isAddingNewCollection)
                {
                    <MudTextField @bind-Value="_newCollectionName"
                                  Label="New Collection Name"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense"
                                  Immediate="true"
                                  HelperText="Enter a name for your new collection" />
                }

                <!-- Action buttons -->
                <div class="d-flex justify-space-between mt-3">
                    <MudButton OnClick="ToggleExpansion"
                               Variant="Variant.Text"
                               Color="Color.Secondary">
                        Close
                    </MudButton>

                    <div class="d-flex gap-2">
                        @if (_isAddingNewCollection)
                        {
                            <MudButton OnClick="CancelNewCollection"
                                       Variant="Variant.Text"
                                       Color="Color.Secondary">
                                Cancel
                            </MudButton>
                            <MudButton OnClick="CreateNewCollection"
                                       Disabled="@(string.IsNullOrWhiteSpace(_newCollectionName))"
                                       Variant="Variant.Filled"
                                       Color="Color.Primary">
                                Create
                            </MudButton>
                        }
                        else
                        {
                            <MudButton OnClick="AddToCollection"
                                       Disabled="@(string.IsNullOrWhiteSpace(_selectedCollection))"
                                       Variant="Variant.Filled"
                                       Color="Color.Primary">
                                Add
                            </MudButton>
                        }
                    </div>
                </div>
            </MudStack>
        </div>
    }
</div>

@code {
    [Parameter]
    public ArtworkPreview ArtworkPreview { get; set; } = null;
    private string? CreateNew = "NewCollection";
    private bool _isExpanded = false;
    private bool _isSaved = false;
    private bool _isAddingNewCollection = false;
    private string _newCollectionName = string.Empty;
    private string _selectedCollection = string.Empty;
    private List<Collection> _userCollections = new();

    protected override async Task OnInitializedAsync()
    {
        await FetchCollections();
    }

    private async Task ToggleExpansion()
    {
        _isExpanded = !_isExpanded;
        if (!_isExpanded)
        {
            _isAddingNewCollection = false;
            _newCollectionName = string.Empty;
            _selectedCollection = string.Empty;
        }
        StateHasChanged();
    }

    private void StartNewCollectionFlow()
    {
        _isAddingNewCollection = true;
        _selectedCollection = string.Empty;
        StateHasChanged();
    }

    private void CancelNewCollection()
    {
        _isAddingNewCollection = false;
        _newCollectionName = string.Empty;
        StateHasChanged();
    }

    private async Task AddToCollection()
    {
        Console.WriteLine($"Adding artwork {ArtworkPreview.Title} to collection {_selectedCollection}");

        if (!string.IsNullOrWhiteSpace(_selectedCollection) && ArtworkPreview != null)
        {
            try
            {
                var addArtworkToCollectionResult = await CollectionsService.AddArtworkToCollectionAsync(_selectedCollection, ArtworkPreview);
                if (!addArtworkToCollectionResult.IsSuccess)
                {
                    Console.WriteLine($"Could not add artwork to collection: {addArtworkToCollectionResult.Message}");

                }
                else
                {
                    _isSaved = true;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Exception adding artwork to collection: {ex.Message}");
            }
        }

        _isExpanded = !_isExpanded;
        StateHasChanged();
    }

    private async Task CreateNewCollection()
    {
        if (!string.IsNullOrWhiteSpace(_newCollectionName))
        {
            try
            {
                var addOperationResult = await CollectionsService.CreateCollectionAsync(new Collection(_newCollectionName));
                if (addOperationResult.IsSuccess)
                {
                    await FetchCollections();
                    _selectedCollection = _newCollectionName; // Auto-select the newly created collection
                    Console.WriteLine($"Successfully created collection: {_newCollectionName}");
                }
                else
                {
                    Console.WriteLine($"Failed to create collection: {addOperationResult.Message}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Exception creating collection: {ex.Message}");
            }
            finally
            {
                _newCollectionName = string.Empty;
                _isAddingNewCollection = false;
                StateHasChanged();
            }
        }
    }

    private async Task FetchCollections()
    {
        try
        {
            var collectionsResult = await CollectionsService.GetCollectionsAsync();
            if (collectionsResult.IsSuccess)
            {
                _userCollections = collectionsResult.Value.Collections.ToList();
                Console.WriteLine($"Fetched {_userCollections.Count} collections");
            }
            else
            {
                Console.WriteLine($"Error fetching collections: {collectionsResult.Message}");
                _userCollections = new List<Collection>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception fetching collections: {ex.Message}");
            _userCollections = new List<Collection>();
        }
        finally
        {
            StateHasChanged();
        }
    }
}